grid[pos] = sample(rep(c("red", "blue"), c(ncars[1],ncars[2])))
#  grid[pos[1:ncars[1]]]="red"
# grid[pos[-(1:ncars[1])]]="blue"  #becuase the position is random, so the red and blue are random and have same prob
class(grid) = c("BML",class(grid))
grid
}
createBMLGrid(2,3,c(2,3))
createBMLGrid(2,3,c(1,3))
createBMLGrid(2,3,c(1,1))
createBMLGrid(2,3,c(0,1))
createBMLGrid(2,3,c(1,0))
createBMLGrid(2,3,0.2)
library('BMLGrid')
rm(list=ls())
library('BMLGrid')
createBMLGrid(3,2,c(1,2))
plot.BML = function (grid, main="BML plot", ...)
{
g=t(grid)[,nrow(grid):1] #because of the image funtion, in order to make the matric and the image same
matchcol = matrix(match(g, c("", "blue", "red")), nrow(g))
ifelse(length(which(grid==""))==0, color = c("blue", "red")
ifelse(!"red" %in% grid, color = c("white", "blue"),
ifelse(!"blue" %in% grid, color = c("white","red"),color = c("white", "blue", "red"))))
image(matchcol, col = color,axes = FALSE, main = main, xlab = "", ylab = "" , ... )
box()
}
plot.BML = function (grid, main="BML plot", ...)
{
g=t(grid)[,nrow(grid):1] #because of the image funtion, in order to make the matric and the image same
matchcol = matrix(match(g, c("", "blue", "red")), nrow(g))
ifelse(length(which(grid==""))==0, color = c("blue", "red"),
ifelse(!"red" %in% grid, color = c("white", "blue"),
ifelse(!"blue" %in% grid, color = c("white","red"),color = c("white", "blue", "red"))))
image(matchcol, col = color,axes = FALSE, main = main, xlab = "", ylab = "" , ... )
box()
}
g=createBMLGrid(3,2,c(1,2))
plot(g)
grid=g
grid
ifelse(length(which(grid==""))==0, color = c("blue", "red"), color="blue")
color=ifelse(length(which(grid==""))==0, c("blue", "red"), "blue")
color
plot.BML = function (grid, main="BML plot", ...)
{
g=t(grid)[,nrow(grid):1] #because of the image funtion, in order to make the matric and the image same
matchcol = matrix(match(g, c("", "blue", "red")), nrow(g))
color=ifelse(length(which(grid==""))==0, c("blue", "red"),
ifelse(!"red" %in% grid, c("white", "blue"),
ifelse(!"blue" %in% grid, c("white","red"), c("white", "blue", "red"))))
image(matchcol, col = color,axes = FALSE, main = main, xlab = "", ylab = "" , ... )
box()
}
plot.BML = function (grid, main="BML plot", ...)
{
g=t(grid)[,nrow(grid):1] #because of the image funtion, in order to make the matric and the image same
matchcol = matrix(match(g, c("", "blue", "red")), nrow(g))
color=ifelse(length(which(grid==""))==0, c("blue", "red"),
ifelse(!"red" %in% grid, c("white", "blue"),
ifelse(!"blue" %in% grid, c("white","red"), c("white", "blue", "red"))))
image(matchcol, col = color,axes = FALSE, main = main, xlab = "", ylab = "" , ... )
box()
}
plot(g)
g
grid=g
grid
g=t(grid)[,nrow(grid):1] #because of the image funtion, in order to make the matric and the image same
matchcol = matrix(match(g, c("", "blue", "red")), nrow(g))
color=ifelse(length(which(grid==""))==0, c("blue", "red"),
ifelse(!"red" %in% grid, c("white", "blue"),
ifelse(!"blue" %in% grid, c("white","red"), c("white", "blue", "red"))))
color
color=c()
color=ifelse(length(which(grid==""))==0, c("blue", "red"),
ifelse(!"red" %in% grid, c("white", "blue"),
ifelse(!"blue" %in% grid, c("white","red"), c("white", "blue", "red"))))
color
plot.BML = function (grid, main="BML plot", ...)
{
g=t(grid)[,nrow(grid):1] #because of the image funtion, in order to make the matric and the image same
matchcol = matrix(match(g, c("", "blue", "red")), nrow(g))
if(length(which(grid==""))==0) {color=c("blue", "red")
}if(!"red" %in% grid) {
color=c("white", "blue")
}if(!"blue" %in% grid){
color = c("white","red")
}else{
color= c("white", "blue", "red")
}
image(matchcol, col = color,axes = FALSE, main = main, xlab = "", ylab = "" , ... )
box()
}
plot.BML = function (grid, main="BML plot", ...)
{
g=t(grid)[,nrow(grid):1] #because of the image funtion, in order to make the matric and the image same
matchcol = matrix(match(g, c("", "blue", "red")), nrow(g))
if(length(which(grid==""))==0) {color=c("blue", "red")
}else if(!"red" %in% grid) {
color=c("white", "blue")
}else if(!"blue" %in% grid){
color = c("white","red")
}else{
color= c("white", "blue", "red")
}
image(matchcol, col = color,axes = FALSE, main = main, xlab = "", ylab = "" , ... )
box()
}
plot(g)
g
createBMLGrid(2,3,0.3)
g=createBMLGrid(2,3,0.3)
g=createBMLGrid(2,3,c(1,2))
g
plot(g)
g=createBMLGrid(2,3,c(0,2))
g
createBMLGrid = function (r, c , ncars, prop = 0.5 ) # dim the grid dimention and carprop is the car proportion , the prop is the red:blue, if it is c(a,b), a is number of red car and b is num of blue car
{
if (r<=0||c<=0)
stop("Row and column of grid should be bigger than 0!\n")
if (any(ncars < 0))
stop("Number of cars should be bigger than 0!\n")
if (sum(ncars)>r*c)
stop("Number of cars should be no bigger than the demension of the grid!\n")
if (sum(ncars)==r*c)
warning("There are full of cars in the grid!\n")
if ( length(ncars) == 1 && ncars < 1 ) #if input is proportion of the cars
ncars = round(rep(r*c*ncars*prop, 2)) # one for the blue cars number and the other for the red car number
grid = matrix("", r, c)
pos = sample(1:(r*c),sum(ncars))
grid[pos] = sample(rep(c("red", "blue"), c(ncars[1],ncars[2])))
class(grid) = c("BML",class(grid))
grid
}
g=createBMLGrid(2,3,c(0,2))
g
plot(g)
g=createBMLGrid(2,3,c(3,2))
g
g=createBMLGrid(2,3,c(3,3))
g
plot(g)
g=createBMLGrid(2,3,c(3,0))
g
plot(g)
install.packages("devtools")
install.packages("testthat")
getwd()
setwd("/Users/mac/Desktop/package/BMLGrid.R")
rm()
rm(list=ls())
setwd("/Users/mac/Desktop/package/BMLGrid.R")
setwd("/Users/mac/Desktop/package/BMLGrid.R")
getwd()
list.files()
setwd("/Users/mac/Desktop/package/BMLGrid")
devtools::use_testthat()
library("BMLGrid")
createBMLGrid(2,3,c(-1,2))
g=createBMLGrid(2,3,c(0,2))
g
library("BMLGrid")
g=createBMLGrid(2,3,c(0,2))
g
library("BMLGrid")
g=createBMLGrid(2,3,c(0,2))
g
library("BMLGrid")
g=createBMLGrid(2,3,c(0,2))
g
ls
getwd()
package.skeleton(name="BMLGrid", code_files="BMLGrid.R")
setwd("/Users/mac/Desktop/mypackage/")
package.skeleton(name="BMLGrid", code_files="BMLGrid.R")
install.packages("devtools")
install.packages("devtools")
install.packages("testthat")
install.packages("testthat")
getwd()
setwd("/Users/mac/Desktop/mypackage/BMLGrid/")
devtools::use_testthat()
library("BMLGrid")
createBMLGrid(3,2,c(0,2))
g=createBMLGrid(3,2,c(0,2))
plot(g)
g=createBMLGrid(3,3,c(0,2))
g
library("BMLGrid")
g=createBMLGrid(3,3,c(0,2))
g
createBMLGrid = function (r, c , ncars, prop = 0.5 ) # dim the grid dimention and carprop is the car proportion , the prop is the red:blue, if it is c(a,b), a is number of red car and b is num of blue car
{
if (r<=0||c<=0)
stop("Row and column of grid should be bigger than 0!\n")
if (any(ncars < 0))
stop("Number of cars should be bigger than 0!\n")
if (sum(ncars)>r*c)
stop("Number of cars should be no bigger than the demension of the grid!\n")
if (sum(ncars)==r*c)
warning("There are full of cars in the grid!\n")
if ( length(ncars) == 1 && ncars < 1 ) #if input is proportion of the cars
ncars = round(rep(r*c*ncars*prop, 2)) # one for the blue cars number and the other for the red car number
grid = matrix("", r, c)
pos = sample(1:(r*c),sum(ncars))
grid[pos] = sample(rep(c("red", "blue"), c(ncars[1],ncars[2])))
class(grid) = c("BML",class(grid))
grid
}
g=createBMLGrid(3,3,c(0,2))
g
rm(list=ls())
library(BMLGrid)
g=createBMLGrid(3,3,c(0,2))
g
rm(list=ls())
library(BMLGrid)
g=createBMLGrid(3,3,c(0,2))
g
rm(list=ls())
library(BMLGrid)
createBMLGrid(2,3,c(0,1))
createBMLGrid(2,3,c(0,2))
library(BMLGrid)
createBMLGrid(2,3,c(0,2))
createBMLGrid(2,3,c(0,1))
g=createBMLGrid(2,3,c(0,1))
plot(g)
g=createBMLGrid(2,3,c(2,3))
g
g=createBMLGrid(2,3,c(3,3))
plot(g)
library(BML)
createBMLGrid(2,3,c(0,1))
createBMLGrid(2,3,c(0,2))
package.skeleton(name="BMLgrid", code_files="BMLgrid.R")
getsd()
getwd()
seted("/Users/mac/Desktop")
setwd("/Users/mac/Desktop")
getwd()
package.skeleton(name="BMLgrid", code_files="BMLgrid.R")
rm(list=ls())
library(BMLgrid)
createBMLGrid(2,3,c(0,2))
g=createBMLGrid(2,3,c(0,2))
plot(g)
g
g=createBMLGrid(2,3,c(3,2))
g=createBMLGrid(2,3,c(3,3))
g
plot(g)
getwd()
setwd("/Users/mac/Desktop/BMLgrid.R")
list.files()
setwd("/Users/mac/Desktop/BMLgrid.R")
setwd("/Users/mac/Desktop/BMLgrid")
getsd()
getwd()
list.files()
devtools::use_testthat()
rm(list=ls())
temp = read.delim("~/Desktop/sta299/temperature.txt")
highmonth=ts(temp[,4],start=c(1951,1),freq=12)
highannual=aggregate(highmonth)/12 # average over 12 month each year
layout(1:2)
plot(highmonth)
plot(highannual)
temp_high=temp[,c(1,2,4)]
rm(list=ls())
temp = read.delim("~/Desktop/sta299/temperature.txt")
temp_high=temp[,c(1,2,4)]
temp_high$year = as.factor(temp_high$year)
temp_high$month = as.factor(temp_high$month)
model = lm(high_temp ~ year+month, data = temp_high)
model.aov = summary(model); model.aov
anova(model)
rm(list=ls())
temp = read.delim("~/Desktop/sta299/temperature.txt")
temp_high=temp[,c(1,2,4)]
temp_high$year = as.factor(temp_high$year)
temp_high$month = as.factor(temp_high$month)
model = lm(high_temp ~ year+month, data = temp_high)
model.aov = summary(model); model.aov
anova(model)
model.aov$coefficients
model.aov$coefficients[1]
model.aov$coefficients[2:11]
model.aov$coefficients[2:58]
model.aov$coefficients[2:59]
model.aov$coefficients[1]+model.aov$coefficients[2:59]
yeareffect=c(model.aov$coefficients[1],model.aov$coefficients[1]+model.aov$coefficients[2:59])
plot(yeareffect~1951:2009)
yeareffect=c(model.aov$coefficients[1],model.aov$coefficients[1]+model.aov$coefficients[2:59])
plot(yeareffect~1951:2009)
plot(x=1951:2009,y=yeareffect)
plot(x=1951:2009,y=yeareffect,lty="l")
plot(x=1951:2009,y=yeareffect,type = 'l')
plot(x=1951:2009,y=yeareffect,type = 'o',xlab="year", ylab="year effect", main = "year effect")
year=1951:2009
plot(x=year,y=yeareffect,type = 'o',xlab="year", ylab="year effect", main = "year effect")
points(lowess(names(yeareffect), yeareffect)$y~year, type = 'l', lty = 2,col='red')
points(lowess(year, yeareffect)$y~year, type = 'l', lty = 2,col='red')
ylowess=lowess(year, yeareffect)$y
plot(x=year,y=yeareffect,type = 'o',xlab="year", ylab="year effect", main = "year effect and its loess")
points(ylowess~year, type = 'l', lty = 2,col='red')
legend("bottomright", legend=c("fitted", "loess"),col=c('black', 'red'), lty=1, cex=0.7)
legend( legend=c("fitted", "loess"),col=c('black', 'red'), lty=1, cex=0.7)
legend( 'btighr',legend=c("fitted", "loess"),col=c('black', 'red'), lty=1, cex=0.7)
legend( 'bottomright',legend=c("fitted", "loess"),col=c('black', 'red'), lty=1, cex=0.7)
plot(x=year,y=yeareffect,type = 'o',xlab="year", ylab="year effect", main = "year effect and its loess")
points(ylowess~year, type = 'l', lty = 2,col='red')
legend( 'bottomright',legend=c("fitted", "loess"),col=c('black', 'red'), lty=1, cex=0.7)
plot(x=year,y=yeareffect,type = 'o',xlab="year", ylab="year effect", main = "year effect and its loess")
points(ylowess~year, type = 'l', lty = 2,col='red')
legend( "bottomright",legend=c("fitted", "loess"),col=c('black', 'red'), lty=1, cex=0.7)
montheffct=model.aov$coefficients[60:62]
model.aov = summary(model); model.aov
montheffct
montheffct=model.aov$coefficients[60:72]
montheffct
model$coefficients
yeareffect=c(model$coefficients[1],model$coefficients[1]+model$coefficients[2:59])
year=1951:2009
ylowess=lowess(year, yeareffect)$y
plot(x=year,y=yeareffect,type = 'o',xlab="year", ylab="year effect", main = "year effect and its loess")
plot(x=year,y=yeareffect,type = 'o',xlab="year", ylab="year effect", main = "year effect and its loess")
points(ylowess~year, type = 'l', lty = 2,col='red')
montheffct=model$coefficients[60:72]
montheffct
montheffct=model$coefficients[59:70]
montheffct
model$coefficients[60:70]
sum(model$coefficients[60:70])
montheffct=c(model$coefficients[1],model$coefficients[60:70])
montheffct
model$fitted.values
model$fitted.values[1]
montheffct=c(0,model$coefficients[60:70]) #?????????????
month=1:12
plot(x=month,y=montheffect,type = 'o',xlab="month", ylab="month effect", main = "month effect")
montheffect=c(0,model$coefficients[60:70]) #?????????????
month=1:12
plot(x=month,y=montheffect,type = 'o',xlab="month", ylab="month effect", main = "month effect")
monthfit=rep(montheffect,times = 59)
ylfit=rep(ylowess,each = 12)
loessfit=ylfit+monthfit
true=ts(temp[,4],start=c(1951,1),freq=12)
fit=ts(model$fitted.values,start=c(1951,1),freq=12)
lfit=ts(loessfit,start=c(1951,1),freq=12)
plot(true)
lines(fit)
plot(true, ylab="temperature")
lines(fit,col="red")
lines(fit, col = "blue")
ylfit=rep(ylowess,each = 12)
loessfit=ylfit+monthfit
true=ts(temp[,4],start=c(1951,1),freq=12)
fit=ts(model$fitted.values,start=c(1951,1),freq=12)
lfit=ts(loessfit,start=c(1951,1),freq=12)
plot(true, ylab="temperature")
lines(fit,col="red")
lines(fit, col = "blue")
plot(true, ylab=~degree~C)
plot(true, ylab=0.1~degree~C)
plot(true, ylab="tem"0.1~degree~C)
plot(true, ylab="tem\0.1~degree~C")
plot(true, ylab=0.1~degree~C)
lines(fit,col="red")
lines(lfit, col = "blue")
legend(3.2,1,legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
plot(true, ylab=0.1~degree~C)
lines(fit,col="red")
lines(lfit, col = "blue")
legend(1,1,legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
legend("topright", inset=c(-0.2,0),legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
legend("topright",legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
par(xpd=FALSE)
plot(true, ylab=0.1~degree~C)
lines(fit,col="red")
lines(lfit, col = "blue")
legend("topright",legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
par(xpd=FALSE)
plot(true, ylab=0.1~degree~C)
lines(fit,col="red")
lines(lfit, col = "blue")
legend(2.8,0,legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
par(xpd=TRUE)
legend(2.8,0,legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
par(xpd=FALSE)
plot(true, ylab=0.1~degree~C)
lines(fit,col="red")
lines(lfit, col = "blue")
par(xpd=TRUE)
legend(2.8,-1,legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
legend("right",inset=c(-0.3,0), legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
legend("right",inset=c(-0.5,0), legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
plot(true, ylab=0.1~degree~C)
lines(fit,col="red")
lines(lfit, col = "blue")
legend("right",inset=c(-0.3,0), legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
legend("right",inset=c(-0.3,-0.3), legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
legend("right",inset=c(-1,-0.3), legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
legend("right",inset=c(-3,-0.3), legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
legend("right",inset=c(-3,-0.3), legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
legend("right", legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
legend("topright", legend=c("true","fitted", "loess"),col=c('black', 'red',"blue"), lty=1, cex=0.7)
seasonal=temp[,4]-rep(yeareffect,each = 12)
fitsonal= nls(seasonal ~ a*sin(2*pi*month)+b*cos(2*pi*month),data=SST)
fitsonal= nls(seasonal ~ a*sin(2*pi*month)+b*cos(2*pi*month))
fitsonal= nls(seasonal ~ a*sin(2*pi*month/12)+b*cos(2*pi*month/12))
fitsonal= nls(seasonal ~ a+b*sin(2*pi*month/12)+c*cos(2*pi*month/12),start=list(a = 1, b = 1, c=1))
seasonal=temp[,4]-rep(yeareffect,each = 12)
monthy=rep(month,times = 59)
fitsonal= nls(seasonal ~ a+b*sin(2*pi*monthy/12)+d*cos(2*pi*monthy/12),start=list(a = 1, b = 1, c=1))
fitsonal= nls(seasonal ~ a+b*sin(2*pi*monthy/12)+c*cos(2*pi*monthy/12),start=list(a = 1, b = 1, c=1))
fitsonal
fitted(fitsonal)
seasonalts=ts(seasonal,start=c(1951,1),freq=12)
fits=ts(fitted(fitsonal),start=c(1951,1),freq=12)
plot(seasonalts)
lines(fits,col='red')
fitsonal2= nls(seasonal ~ a+b*sin(2*pi*monthy/12)+c*cos(2*pi*monthy/12)+d*sin(4*pi*monthy/12)+e*cos(4*pi*monthy/12),start=list(a = 1, b = 1, c=1,d=1,e=1))
fits2=ts(fitted(fitsonal2),start=c(1951,1),freq=12)
lines(fits2,col='blue')
fitsonal
fitsonal2
seasonal=temp[,4]-ylfit #rep(yeareffect,each = 12)
monthy=rep(month,times = 59)
fitsonal= nls(seasonal ~ a+b*sin(2*pi*monthy/12)+c*cos(2*pi*monthy/12),start=list(a = 1, b = 1, c=1))
#572929
fitsonal2= nls(seasonal ~ a+b*sin(2*pi*monthy/12)+c*cos(2*pi*monthy/12)+d*sin(4*pi*monthy/12)+e*cos(4*pi*monthy/12),start=list(a = 1, b = 1, c=1,d=1,e=1))
#311485
seasonalts=ts(seasonal,start=c(1951,1),freq=12)
fits=ts(fitted(fitsonal),start=c(1951,1),freq=12)
fits2=ts(fitted(fitsonal2),start=c(1951,1),freq=12)
plot(seasonalts,ylab=0.1~degree~C)
lines(fits,col='red')
lines(fits2,col='blue')
ylowess=lowess(monthy, seasonal)$y
lines(ylowess$y, col="yellow")
lines(ylowess, col="yellow")
lowesm=lowess(monthy, seasonal)$y
lines(ylowess, col="yellow")
plot(seasonalts,ylab=0.1~degree~C)
lines(ylowess, col="red")
lowesm=lowess(monthy, seasonal)$y
lowesm=ts(lowesm,start=c(1951,1),freq=12)
plot(ylowess, col="red")
plot(lowesm, col="red")
plot(seasonalts,ylab=0.1~degree~C)
lines(lowesm, col="red")
re=ts(temp[,4]-ylfit-fitted(fitsonal2),,start=c(1951,1),freq=12)
arma = arima(re, order = c(1, 0, 1))
arma
AIC(arma)
acf(resid(arma))
rm(list=ls())
temp = read.delim("~/Desktop/sta299/shijiazhuang.txt")
highmonth=ts(temp[,4],start=c(1955,1),freq=12)
highannual=aggregate(highmonth)/12 # average over 12 month each year
layout(1:2)
plot(highmonth)
plot(highmonth)
plot(highannual)
temp_high=temp[,c(1,2,4)]
temp_high$year = as.factor(temp_high$year)
temp_high$month = as.factor(temp_high$month)
model = lm(high_temp ~ year+month, data = temp_high)
model.aov = summary(model); model.aov
anova(model)
yeareffect=c(model$coefficients[1],model$coefficients[1]+model$coefficients[2:56])
year=1955:2009
ylowess=lowess(year, yeareffect)$y
rm(list=ls())
temp = read.delim("~/Desktop/sta299/shijiazhuang.txt")
highmonth=ts(temp[,4],start=c(1955,1),freq=12)
highannual=aggregate(highmonth)/12 # average over 12 month each year
layout(1:2)
plot(highmonth)
plot(highannual)
temp_high=temp[,c(1,2,4)]
temp_high$year = as.factor(temp_high$year)
temp_high$month = as.factor(temp_high$month)
model = lm(high_temp ~ year+month, data = temp_high)
model.aov = summary(model); model.aov
anova(model)
#year effect and loess
yeareffect=c(model$coefficients[1],model$coefficients[1]+model$coefficients[2:56])
year=1955:2009
ylowess=lowess(year, yeareffect)$y
yeareffect=c(model$coefficients[1],model$coefficients[1]+model$coefficients[2:55])
year=1955:2009
ylowess=lowess(year, yeareffect)$y
plot(x=year,y=yeareffect,type = 'o',xlab="year", ylab=0.1~degree~C, main = "year effect and its loess")
points(ylowess~year, type = 'l', lty = 2,col='red')
#legend( "bottomright",legend=c("fitted", "loess"),col=c('black', 'red'), lty=1, cex=0.7)
#month effct
montheffect=c(0,model$coefficients[56:61]) #?????????????
montheffect
montheffect=c(0,model$coefficients[56:67]) #?????????????
montheffect
montheffect=c(0,model$coefficients[56:66]) #?????????????
montheffect
month=1:12
plot(x=month,y=montheffect,type = 'o',xlab="month", ylab=0.1~degree~C, main = "month effect")
monthfit=rep(montheffect,times = 55)
ylfit=rep(ylowess,each = 12)
loessfit=ylfit+monthfit
true=ts(temp[,4],start=c(1951,1),freq=12)
fit=ts(model$fitted.values,start=c(1951,1),freq=12)
